// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  
}

model Customer{
  identification String @db.VarChar(20) @id
  first_name String @db.VarChar(20)
  middle_name String? @db.VarChar(20)
  last_name String @db.VarChar(20)
  last_name_2 String? @db.VarChar(20)
  email String @unique @db.VarChar(30)
  birthDate DateTime
  phone_number String @db.VarChar(20)
  address String @db.VarChar(40)
  neighborhood String @db.VarChar(30)
  state Boolean
  orders Order[]

  idCity String @db.VarChar(3)

  city City @relation(fields: [idCity], references: [id_city])

  @@map("customers")
}

model Departament{
  id_departament String @db.VarChar(2) @id 
  name String @db.VarChar(100)
  cities City[] 
  @@map("departaments")
}

model City{
  id_city String @db.VarChar(3) @id
  idDepartament String @db.VarChar(2) 
  name String @db.VarChar(100)
  customers Customer[]

  departament Departament @relation(fields: [idDepartament], references: [id_departament])

  @@map("cities")
}

model Order{

  order_number Int @id @default(autoincrement())
  identification_user String @db.VarChar(20)
  type_process String @db.VarChar(15)
  total Decimal  

  iduser Int 
  user User @relation(fields: [iduser], references: [id_user])
  
  customer Customer @relation(fields: [identification_user], references: [identification])
  product_orders ProductOrder[]

  @@map("orders")
}

model User{
 id_user Int @id @default(autoincrement())
 name String @db.VarChar(30)
 last_name String @db.VarChar(30)
 phone_number String @db.VarChar(30)
 initial_data DateTime @default(now())
 email String @unique @db.VarChar(30)
 password String @db.VarChar(60)
 image String? @db.VarChar(50)
 enabled Boolean @default(true)

 idRol Int
 rolUser Rol @relation(fields: [idRol], references: [id_rol])
 orders Order[]

 @@map("users")
}

// enum Role { 
//   USER 
//   ADMIN 
// } 

model Rol{
  id_rol Int @id @default(autoincrement())
  name String @db.VarChar(20)
  rolUser User[]
  @@map("roles")
}

model ProductOrder{
 delivery_date DateTime 
 delivery_invoice DateTime
 reception_date DateTime?
 recepcion_invoice DateTime?
 product_amount Int
 quantity Int
 subtotal Decimal 

 order_number Int
 order Order @relation(fields: [order_number], references: [order_number])

 idPackaging String @db.VarChar(8)
 packaging Packaging @relation(fields: [idPackaging], references: [id_packaging])

 @@id([order_number, idPackaging])

 @@map("product_orders")
}

model Content{
  id_content Int @id @default(autoincrement())
  name String @db.VarChar(20)
  unit_measurement String @db.VarChar(10)
  price Float
  packaging Packaging[]

  @@map("contents")
}

model Packaging{
 id_packaging String @db.VarChar(8)  @id 
 hydrostatic_date DateTime
 stock Int
 supplier String @db.VarChar(30)
 producOrders ProductOrder[]

 idContent Int
 content Content @relation(fields: [idContent], references: [id_content])

 idTypePackaging Int
 typePackaging TypePackaging @relation(fields: [idTypePackaging], references: [id_type_packaging])

@@map("packagings")
}

model TypePackaging{
 id_type_packaging Int @id @default(autoincrement())
 pressure_amount Float
 size Float
 price Float
 color String @db.VarChar(20)
 packaging Packaging[]

 @@map("type_packagings")
}
