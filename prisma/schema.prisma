generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  identification String     @id @db.VarChar(20)
  first_name     String     @db.VarChar(20)
  middle_name    String?    @db.VarChar(20)
  last_name      String     @db.VarChar(20)
  last_name_2    String?    @db.VarChar(20)
  email          String     @unique @db.VarChar(30)
  birthDate      DateTime
  phone_number   String     @db.VarChar(20)
  address        String     @db.VarChar(40)
  neighborhood   String     @db.VarChar(30)
  state          Boolean    @default(true)
  warranty       String     @db.VarChar(100)
  typePerson     PersonType
  cty_id         String     @db.VarChar(3)
  dpt_cty_id     String     @db.VarChar(2)
  city           City       @relation(fields: [cty_id, dpt_cty_id], references: [id, dpt_id])
  orders         Order[]

  @@map("CUSTOMERS")
}

model Departament {
  id     String @id @db.VarChar(2)
  name   String @db.VarChar(100)
  cities City[]

  @@map("DEPARTAMENTS")
}

model City {
  id          String      @db.VarChar(3)
  name        String      @db.VarChar(100)
  dpt_id      String      @db.VarChar(2)
  departament Departament @relation(fields: [dpt_id], references: [id])
  customers   Customer[]

  @@id([id, dpt_id])
  @@map("CITIES")
}

model Order {
  order_number        Int           @id @default(autoincrement())
  identification_user String        @db.VarChar(20)
  type_process        String        @db.VarChar(15)
  total               Decimal
  delivery_code       String?
  reception_code      String?
  iduser              Int
  customers           Customer      @relation(fields: [identification_user], references: [identification])
  users               User          @relation(fields: [iduser], references: [id])
  product_orders      DetailOrder[]

  @@map("ORDERS")
}

model User {
  id           Int      @id @default(autoincrement())
  name         String   @db.VarChar(30)
  last_name    String   @db.VarChar(30)
  phone_number String   @db.VarChar(30)
  initial_data DateTime @default(now())
  email        String   @unique @db.VarChar(30)
  password     String   @db.VarChar(60)
  image        String?  @db.VarChar(50)
  enabled      Boolean  @default(true)
  rol_id       Int
  orders       Order[]
  rolUser      Rol      @relation(fields: [rol_id], references: [id])

  @@map("USERS")
}

model Rol {
  id      Int    @id @default(autoincrement())
  name    String @db.VarChar(20)
  rolUser User[]

  @@map("ROLES")
}

model DetailOrder {
  delivery_date  DateTime?
  reception_date DateTime?
  product_amount Int
  quantity       Int
  subtotal       Decimal
  empty          Boolean   @default(true)
  order_number   Int
  pkg_id         String    @db.VarChar(8)
  order          Order     @relation(fields: [order_number], references: [order_number])
  packaging      Packaging @relation(fields: [pkg_id], references: [id])

  @@id([order_number, pkg_id])
  @@map("DETAIL_ORDERS")
}

model Content {
  id        Int         @id @default(autoincrement())
  name      String      @db.VarChar(20)
  color     String      @db.VarChar(20)
  packaging Packaging[]

  @@map("CONTENTS")
}

model Packaging {
  id               String        @id @db.VarChar(15)
  hydrostatic_date DateTime
  owner            String        @db.VarChar(30)
  empty            Boolean       @default(false)
  inStorage        Boolean       @default(true)
  ctt_id           Int
  tpg_cod          Int
  content          Content       @relation(fields: [ctt_id], references: [id])
  typePackaging    TypePackaging @relation(fields: [tpg_cod], references: [cod])
  producOrders     DetailOrder[]

  @@map("PACKAGINGS")
}

model TypePackaging {
  cod             Int         @id @default(autoincrement())
  size            Float
  pressure_amount String      @db.VarChar(3)
  packaging       Packaging[]

  @@map("TYPE_PACKAGINGS")
}

enum PersonType {
  NATURAL
  JURIDICO
}
